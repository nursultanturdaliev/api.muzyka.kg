<?php

namespace AppBundle\Repository;

use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\EntityRepository;

/**
 * SongRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SongRepository extends EntityRepository
{
	public function findAllQuery()
	{
		return $this->createQueryBuilder('s');
	}

	public function getInfo()
	{
		return array(
			'count' => $this->createQueryBuilder('song')
							->select('count(song.id)')
							->getQuery()
							->getSingleScalarResult()
		);
	}

	/**
	 * @param $songTitle
	 * @param array $artistNames
	 *
	 * @return \Doctrine\ORM\QueryBuilder
	 *
	 */
	public function findBySongAndArtist($songTitle, $artistNames)
	{
		return $this->createQueryBuilder('song')
					->join('song.artists', 'artists')
					->where('song.title = :title')
					->andWhere('artists.name IN(:artistNames)')
					->setParameter('title', $songTitle)
					->setParameter('artistNames', $artistNames)
					->getQuery()
					->getOneOrNullResult();
	}

	/**
	 * @param int $max
	 *
	 * @param null $artistId
	 *
	 * @return array
	 */
	public function getRandomSongs($max = 20, $artistId = null)
	{
		$query = $this->createQueryBuilder('song')
					  ->where('song.published = true');
		if ($artistId) {
			$songs = $this->getSongsOfArtist($artistId);
			$ids   = array_column($songs, 'id');

			$query->where('song.id NOT IN(:ids)')
				  ->setParameter('ids', $ids);
		}
		$songs = $query->getQuery()
					   ->execute();
		shuffle($songs);
		return array_slice($songs, 0, $max);
	}

	/**
	 * @param $max
	 *
	 * @return mixed
	 */
	public function topDownloads($max)
	{
		return $this->createQueryBuilder('song')
					->where('song.published = true')
					->addOrderBy('song.countDownload', 'DESC')
					->setMaxResults($max)
					->getQuery()
					->execute();
	}

	public function newReleases()
	{
		return $this->createQueryBuilder('song')
					->where('song.isNew = :isNew')
					->setParameter('isNew', true)
					->orderBy('song.releasedAt', 'DESC')
					->getQuery()
					->execute();
	}

	/**
	 * Search Song by title and artist
	 *
	 * @param $text
	 *
	 * @param int $limit
	 *
	 * @return mixed
	 */
	public function search($text, $limit = 200)
	{
        $text = mb_strtolower($text);
		$texts        = explode(' ', $text);
		$queryBuilder = $this->createQueryBuilder('song')
							 ->leftJoin('song.artists', 'artists')
                             ->where('song.published = true')
        ;
		foreach ($texts as $text) {
			$queryBuilder->orWhere('lower(song.title) LIKE :text')
						 ->orWhere('lower(artists.name) LIKE :text')
						 ->orWhere('lower(artists.lastname) LIKE :text')
            ;

		}
		return $queryBuilder
			->setMaxResults($limit)
			->setParameter(':text', '%' . mb_strtolower($text) . '%')
			->getQuery()
			->execute();
	}

	public function searchByAllProperties($text){

		return $this->createQueryBuilder('song')
					->where('lower(song.title) LIKE lower(:text)')
                    ->andWhere('song.published = true')
					->setParameter('text', '%' . $text . '%')
					->setFirstResult(0)
					->setMaxResults(7)
					->getQuery()
					->execute();
	}

	private function getSongsOfArtist($artistId)
	{
		return $this->createQueryBuilder('song')
					->select('song.id')
					->join('song.artists', 'artists')
					->where('artists.id = :id')
					->setParameter('id', $artistId)
					->getQuery()
					->execute();
	}

	public function top()
	{
		return $this->getEntityManager()->createQuery('SELECT s, a, count(h.id) as amount from AppBundle:Song s LEFT JOIN s.artists a LEFT JOIN AppBundle:History h WHERE  s = h.song GROUP BY s.id, a.id ORDER BY amount DESC');
	}
}
