{% extends '::base.html.twig' %}
{% block body %}
    <div id="home-index">
        {% verbatim %}
    <div class="container">
        <div class="row">
            <div class="col-sm-8">
                <div class="song-filter-form">
                    <div class="row">
                        <div class="col-xs-3">
                            <select class="form-control" v-model="searchForm.orderBy" required>
                                <option v-for="(orderBy,index) in search.orderBy" >{{orderBy.title}}</option>
                            </select>
                        </div>
                        <div class="col-xs-9 song-filter-search">
                            <div class="form-group">
                            <input class="form-control" placeholder="Ырдын, ырчынын аты боюнча издеңиз">
                            </div>
                        </div>
                    </div>
                </div>
                <ul class="list-group hover song-list">
                  <li class="list-group-item" v-for="(song,index) in songs" @click="playPause(song)" :class="{'song-active':song.playing}">
                    <div class="row">
                      <div class="col-xs-10 song-content">
                        <span class="song-index">
                            {{index + 1}}
                        </span>
                        <img src="http://placehold.it/30x30" class="song-thumb">
                            <div class="">
                            <div class="song-artist-name">{{song.artist.name}}</div>
                            <div class="song-title">{{song.title}}</div>
                        </div>
                        </div>
                        <div class="col-xs-2 song-control">
                            <i class="fa fa-1-5x hide fa-play" v-if="song.paused"></i>
                            <i class="fa fa-1-5x hide fa-pause" v-if="song.playing"></i>
                            <span class="pull-right">{{song.duration}}</span>
                        </div>
                    </div>
                  </li>
                  <li class="list-group-item text-center" v-if="loadingTopSongs">
                        <i class="fa fa-spinner fa-spin fa-2x"></i>
                  </li>
                </ul>
            </div>
            <div class="col-ms-4">
            </div>
        </div>
    </div>

{% endverbatim %}
        {{ include('AppBundle:Home:_player.html.twig') }}
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        var homeIndex = new Vue({
            el: '#home-index',
            data: {
                offset: 0,
                songs: [],
                song: {},
                loadingTopSongs: true,
                audio: new Audio(),
                interval: null,
                searchForm: {
                    orderBy: null
                },
                search: {
                    orderBy: [{title: 'Топ 50'}, {title: 'Жаңы ырлар'}]
                },
                player: {
                    progress: 0,
                }
            },
            created: function () {
                this.getTopSongs()
            },
            mounted: function () {
                this.configureToLoadWhenReachedBottom();
            },
            watch: {
                offset: function () {
                    this.loadingTopSongs = false;
                }
            },
            methods: {
                getTopSongs: function () {
                    var self = this;
                    self.loadingTopSongs = true;
                    axios.get(Routing.generate('app_api_song_top', {'offset': self.offset}))
                            .then(function (response) {
                                response.data.forEach(function (song) {
                                    song.paused = true;
                                    song.playing = false;
                                    self.songs.push(song);
                                    self.offset = self.songs.length;
                                });
                                if (!self.song.old_url) {
                                    self.song = self.songs[0];
                                }
                            });
                },
                configureToLoadWhenReachedBottom: function () {
                    var self = this;
                    $(window).scroll(function () {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {
                            if (!self.loadingTopSongs) {
                                self.getTopSongs();
                            }
                        }
                    });
                },
                playPause: function (song) {
                    if (this.song !== song) {
                        this.resetLastSongControls();
                    }
                    this.song = song;
                    this.toggleControls();

                    if (this.song.playing) {
                        this.audio.src = song.old_url;
                        this.audio.play();
                        this.configureInterval();
                    } else {
                        this.audio.pause();
                        window.clearInterval(this.interval);
                    }
                },
                configureInterval: function () {
                    this.interval = window.setInterval(this.intervalCallBack, 500);
                },
                intervalCallBack: function () {
                    this.updateProgress();
                    this.playNextIfEnded();

                },
                updateProgress: function () {
                    var maxLength = $('.playbackTimeline__progressWrapper')[0].offsetWidth;
                    this.player.progress = this.audio.currentTime * maxLength / this.audio.duration;
                },
                playNextIfEnded: function () {
                    if (this.audio.ended) {
                        this.playPause(this.getNextSong());
                    }
                },
                getNextSong: function () {
                    var currentSongIndex = this.songs.indexOf(this.song);
                    currentSongIndex = (++currentSongIndex) % this.songs.length;
                    return this.songs[currentSongIndex];
                },
                getPreviousSong: function () {
                    var currentSongIndex = this.songs.indexOf(this.song);
                    currentSongIndex = (--currentSongIndex) % this.songs.length;
                    if (currentSongIndex < 0) {
                        currentSongIndex = this.songs.length - 1;
                    }
                    return this.songs[currentSongIndex];
                },
                playNextSong: function () {
                    this.playPause(this.getNextSong());
                },
                playPreviousSong: function () {
                    this.playPause(this.getPreviousSong());
                },
                toggleControls: function () {
                    this.song.playing = !this.song.playing;
                    this.song.paused = !this.song.paused;
                },
                resetLastSongControls: function () {
                    this.song.paused = true;
                    this.song.playing = false;
                },
                pause: function () {
                    this.audio.pause();
                }
            }
        });
    </script>
{% endblock %}